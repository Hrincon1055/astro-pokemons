---
import PokemonCard from '@components/pokemons/PokemonCard.astro';
import Title from '@components/shared/Title.astro';
import type { IPokemonResponse } from '@interfaces/pokemon.interface';
import Layout from '@layouts/Layout.astro';
import { Icon } from 'astro-icon/components';
import type { GetStaticPaths } from 'astro';
export const getStaticPaths = (async () => {
  const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
  const { results } = (await resp.json()) as IPokemonResponse;

  return results.map(({ name, url }) => {
    return {
      params: { name },
      props: { name, url },
    };
  });
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/legacy/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<Layout
  title={`Pokémon - #${id} ${name}`}
  description={`Información sobre el pokémon ${name}`}
  image={imageSrc}>
  <section class='mt-10 mx-10 flex flex-col justify-center items-center'>
    <div class='flex flex-row mb-4'>
      <div>
        <button
          onclick='history.back()'
          class='text-blue-500 p-2 cursor-pointer'>Regresar</button
        >
        <Title>{name}</Title>
      </div>
      <button id='btn-favorite' class='ml-4' data-name={name} data-id={id}>
        <Icon data-outline name='heart-outline' size={50} />
        <Icon data-full class='hidden' name='heart-full' size={50} />
      </button>
    </div>
    <PokemonCard name={name} url={url} isBig />
    <audio controls class='mt-5'>
      <source src={audioSrc} type='audio/ogg' />
      Your brouser does not support the audio tag.
    </audio>
  </section>
</Layout>
<script>
  import type { IFavoritePokemon } from '@interfaces/favoritePokemon';

  const handlePageLoad = () => {
    let favoritePokemons: IFavoritePokemon[] = JSON.parse(
      localStorage.getItem('favorites') ?? '[]'
    );

    const btnFavorite = document.querySelector(
      '#btn-favorite'
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? '';
    const id = btnFavorite.dataset.id ?? '';
    const isFavorite = favoritePokemons.some(
      (pokemon) => pokemon.name === name
    );
    const heartOutline = btnFavorite.querySelector(
      '[data-outline]'
    ) as HTMLElement;
    const heartFull = btnFavorite.querySelector(
      '[data-full]'
    ) as HTMLElement;
    if (isFavorite) {
      heartOutline.classList.add('hidden');
      heartFull.classList.remove('hidden');
    }
    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some(
        (pokemon) => pokemon.name === name
      );
      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter(
          (pokemon) => pokemon.name !== name
        );
      } else {
        favoritePokemons.push({ id: +id, name });
      }
      localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener('click', () => {
      heartOutline.classList.toggle('hidden');
      heartFull.classList.toggle('hidden');
      toggleFavorite();
    });
  };
  document.addEventListener('astro:page-load', handlePageLoad);
</script>

<style>
  @reference '../../styles/global.css';
  a {
    @apply hover:underline text-blue-500;
  }
  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
